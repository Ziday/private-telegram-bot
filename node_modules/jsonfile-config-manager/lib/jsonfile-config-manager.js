/* ___________________________________________________________________________

  Module: jsonfile-config-manager.js   Version: v0.0.5
  Repository: http://github.com/GuillermoPena/jsonfile-config-manager
  Author: Guillermo PeÃ±a (guillermo.pena.cardano@gmail.com)
  Last update:  30/06/2015

  Easy config managment by json files for your developments

  __________________________________________________________________________*/

// ___ Modules ___________________________________________________________

var fs     = require('fs')
var path   = require('path')
var events = require('events')

// __ Properties _________________________________________________________

var logger                             // Logger object
var config   = new Object()            // Configuration object
config.files = new Object()            // Configuration files path
var emitter  = new events.EventEmitter // Event emitter
var allowedExtensions = []             // Allowed extensions

// __ Private Methods ____________________________________________________

// Log
var log = function(level, message) {

  // If no logger, console output
  if (!logger) {
    switch(level.toLowerCase()) {
      case 'error':
          console.error(message)
          break
      case 'warn':
          console.warn(message)
          break
      case 'info':
          console.info(message)
          break
      case 'debug':
          break
      default:
          if (!message) message = level
          console.log(message)
    }
    return
  }

  // If (winston) logger exists...
  if (!level) message = undefined
  logger.log(level, message)
}

// Checking that is a file
var checkIsFile = function(file) {
  var fileStats = fs.statSync(file, function(error, stats){
    if (error) {
      log('debug', error)
      return false
    } else {
      var isFile = stats.isFile()
      if (!isFile) log('error', 'ConfigManager: ' + file + ' : Is not a file!')
      else         log('debug', 'ConfigManager: ' + file + ' : is a file. Confirmed')
      return isFile
    }
  })
}

// Get file name from full path
var checkFilename = function(file) {

  // Look for extension in allowed extensions array
  var ext   = path.extname(file).replace('.','')
  var found = false
  if (allowedExtensions.length > 0) {
    var i = 0
    while (!found && i < allowedExtensions.length) {
      if (ext == allowedExtensions[i]) found = true
      i++
    }
  }

  // If extension is allowed, return file name
  if (found || allowedExtensions.length == 0) {
    log('debug', 'ConfigManager: ' + file + ' : Allowed filename confirmed')
    return path.basename(file, '.' + ext)
  } else {
    var message = "ConfigManager: File extension is not allowed: " + file
    log('error', message)
  }
}

// Check file existence
var checkFileExistence = function(file) {

  if (!fs.existsSync(file))
    log('error', "ConfigManager: Error loading config: File not found: " + file)
  else {
    if (!fs.statSync(file).isFile())
      log('debug', "ConfigManager: " + file + ' : Is not a file!')
    else {
      log('debug', "ConfigManager: " + file + ' : File existence confirmed')
      return true
    }
  }
  return false
}

// Check json file integrity and load content
var loadJsonFile = function(file) {
  var content = fs.readFileSync(file, 'utf8')
  try {
    jsonContent = JSON.parse(content)
    log('debug', 'ConfigManager: ' + file + ' : Correct Json content file confirmed')
    return jsonContent
  } catch (err)	{
    log('error', "ConfigManager: Error loading config: Corrupted json file: " + file)
  }
}

// __ Public Methods _____________________________________________________

// Set logger object
var setLogger = function(loggerObj) { logger = loggerObj }

// Set Allowed Extensions
var setAllowedExtensions = function(ae) {
  allowedExtensions = (Array.isArray(ae)) ? ae : []
}

// Add many Json configuration files and load content
var addFiles = function(filesArray, branchArray, watchArray, cbArray, callback) {

  // When all files are loaded...
  var loadedFiles = 0
  emitter.on('loaded', function() {
    loadedFiles++
    if (loadedFiles == filesArray.length) {
      emitter.emit('allFilesLoaded')
      if (typeof(callback) === "function") callback
    }
  })

  // Adding files
  var i = 0
  filesArray.forEach(function(file){
    var branchName = (branchArray.length > i && branchArray[i]) ? branchArray[i] : null
    var watch = (watchArray.length > i && watchArray[i]) ? watchArray[i] : false
    var callback = (cbArray.length > i && typeof(cbArray[i]) == 'function') ? cbArray[i] : null
    addFile(file, branchName, watch, callback)
    i++
  })
}

// Add Json file, check integrity and add content
var addFile = function(file, branchName, watch, callback) {

  log('debug', 'Adding json config file: ' + file)
  if (checkFileExistence(file)) {

    // Setting watcher
    if (watch) {
      fs.watchFile(file, function () {
        log('debug', 'ConfigManager: ' + file + ' : File edition detected. Reloading config...')
        fs.unwatchFile(file)
        addFile(file, branchName, watch, callback)
      })
    }

    // Checking file and content
    var filename = checkFilename(file)
    var content  = loadJsonFile(file)

    // Setting config object
    if (filename && content) {
      log('debug', 'ConfigManager: ' + file + ' : Assigning json content')
      if (branchName) filename = branchName
      config.files[filename] = new Object()
      config.files[filename].name  = file
      config.files[filename].watch = watch
      config[filename] = content

      // When config file is loaded, we emit event and run callback
      log('info', 'ConfigManager: ' + file + ' : Loaded!')
      emitter.emit('loaded')
      if (typeof(callback) === "function") callback(file)
    }
  }
}

// Remove Json file and remove content from config object
var removeFile = function(file) {
  log('debug', 'Removing json config file: ' + file)
  var ext = path.extname(file).replace('.','')
  var filename = path.basename(file, '.' + ext)
  delete config.files[filename]
  delete config[filename]
  fs.unwatchFile(file)
}

// Update file of branch of configuration
var updateBranchFile = function(branch) {

  try {
    var file = config.files[branch]
    var content = JSON.stringify(config[branch], null, '\t')
    if (file && content)
      fs.writeFileSync(file, content, 'utf8')
  } catch (err) {
    log('error', 'ConfigManager: error updating branch "' + branch + '" : ' + err)
  }
}


module.exports = { "emitter": emitter
                 , "config": config
                 , "setLogger": setLogger
                 , "setAllowedExtensions":setAllowedExtensions
                 , "addFiles": addFiles
                 , "addFile": addFile
                 , "removeFile": removeFile
                 , "updateBranchFile": updateBranchFile
                 }
